<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hive-monitor检测服务设计与实现</title>
      <link href="/2019/09/23/hive-monitor-jian-ce-fu-wu-she-ji-yu-shi-xian/"/>
      <url>/2019/09/23/hive-monitor-jian-ce-fu-wu-she-ji-yu-shi-xian/</url>
      
        <content type="html"><![CDATA[<div align="middle"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=407679465&auto=1&height=66"></iframe></div><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在日常开发工作中，在服务器上运行的每个任务的运行结果及详情，是我们需要关心的，在数据仓库的建设开发中，我们需要更早更准确的知道数据同步、仓库建设等任务是否成功，及结果是否符合预期，特别是在任务发生异常的时候可以更快的定位分析和解决，以保证提供给下游和业务人员的数据是准确的。</p><p>现行的监控和告警系统中，主要依托于大数据生态圈中组件自身携带的功能，使得需要定制化服务的项目无法使用，需要单独进行开发，在数据仓库方向。目前主要依托于人工去检查任务是否成功，或是业务人员的反馈进行查验，主要的痛点在于不能够及时的发现异常甚至于一些较少人使用的数据不能发现异常，同时日常的手工检验工作耗费了大量的人力和精力。</p><p>因此，经过调研，从互联网公司的一些需求及各位开发人员的使用经验出发，结合公司实际设计开发了现在的检测监控系统：hive-monitor。</p><h1 id="整体设计"><a href="#整体设计" class="headerlink" title="整体设计"></a>整体设计</h1><p>hive-monitor系统开发语言选用Java和Kotlin，框架选用有Spring、SpringBoot、MyBatis、Vue、Quartz等。系统通过Vue+HTML的前端页面进行任务的添加、删除及任务调度的配置、执行和删除，同时对任务执行结果的展示和筛选，选用Quartz依赖其本身对任务调度的动态配置，后端服务通过Spring和MyBatis实现对任务的动态配置。任务在执行时会查询任务需要校验的字符串表达式，同时通过提供的prestoServer、hiveServer、hdfsServer接口对表达式中的每个元素进行赋值，将赋值后的表达式通过grovy脚本语言进行执行，判断其真假，最终将执行的结果通过已经实现的邮件发送和企业微信接口分别发送给需要提醒的人员。下面是系统的架构图：</p><p><img src="blog01.png" alt="from30kfeet"></p><h1 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h1><h4 id="1-前端实现"><a href="#1-前端实现" class="headerlink" title="1. 前端实现"></a>1. 前端实现</h4><p>hive-monitor是基于docker web vue搭建的前端页面，设计在页面上可以对检测的Job进行配置修改执行等操作，同时在页面中能查看执行的检查结果，根据需要提供相应的搜索功能和cron表达式生成页面。下面是现有的页面截图：</p><p><img src="job_config.png" alt="from30kfeet"></p><p><img src="cron_config.png" alt="from30kfeet"></p><h4 id="2-后端实现"><a href="#2-后端实现" class="headerlink" title="2. 后端实现"></a>2. 后端实现</h4><p>在后端使用的技术框架有SpringBoot、MyBatis、Quartz，开发语言主要为Java+Kotlin，在Controller统一接收和响应前端的请求，然后调用Service层处理请求，在DAO层通过Aop实现多数据源的配置，现配有数据源有mysql、presto、hive-jdbc三个，主要的配置项如下：</p><pre class="line-numbers language-xml"><code class="language-xml"># mysqlmysql.name1.driver-class-name=com.mysql.jdbc.Drivermysql.name1.url=jdbc:mysql://host:port/database?useUnicode=true&amp;characterEncoding=UTF-8# prestopresto.name2.url=jdbc:presto://host:port/hive/onlinepresto.name2.driverClassName=com.facebook.presto.jdbc.PrestoDriver# hive-jdbchive.name3.url=jdbc:hive2://host:port/hive.name3.driverClassName=org.apache.hive.jdbc.HiveDriver<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在Service的实现类中，通过传入的jobID查询需要执行的job及关联信息，根据任务的配置信息进行表达式赋值查询并对表达式验真，将验证结果及表达式信息记录和持久化。</p><h4 id="3-调度实现"><a href="#3-调度实现" class="headerlink" title="3. 调度实现"></a>3. 调度实现</h4><p>Hive-monitor的调度采用quartz进行实行，在Controller中接收前端传递的Job配置信息，根据Cron表达式生成相应的Job，存放至quartz对应的表中。下面是添加job的部分代码：</p><pre class="line-numbers language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">modifyJob</span><span class="token punctuation">(</span>quartz<span class="token operator">:</span> QuartzEntity<span class="token punctuation">)</span><span class="token operator">:</span> Boolean <span class="token punctuation">{</span>    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">"modifyJob"</span><span class="token punctuation">,</span> <span class="token string">"新增任务 <span class="token interpolation variable">$quartz</span>"</span><span class="token punctuation">)</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取Scheduler实例、废弃、使用自动注入的scheduler、否则spring的service将无法注入</span>        <span class="token comment" spellcheck="true">//Scheduler scheduler = StdSchedulerFactory.getDefaultScheduler();</span>        <span class="token comment" spellcheck="true">//如果是修改  删除旧的 任务</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>quartz<span class="token punctuation">.</span>oldJobGroup <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">val</span> key <span class="token operator">=</span> <span class="token function">JobKey</span><span class="token punctuation">(</span>Objects<span class="token punctuation">.</span>requireNonNull<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span>quartz<span class="token punctuation">.</span>oldJobName<span class="token punctuation">)</span><span class="token punctuation">,</span> quartz<span class="token punctuation">.</span>oldJobGroup<span class="token punctuation">)</span>            scheduler<span class="token punctuation">.</span><span class="token function">deleteJob</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">val</span> cls <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>quartz<span class="token punctuation">.</span>jobClassName<span class="token punctuation">)</span>        cls<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//构建job信息</span>        <span class="token keyword">val</span> job <span class="token operator">=</span> JobBuilder<span class="token punctuation">.</span><span class="token function">newJob</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span>Objects<span class="token punctuation">.</span>requireNonNull<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span>quartz<span class="token punctuation">.</span>jobName<span class="token punctuation">)</span><span class="token punctuation">,</span>                quartz<span class="token punctuation">.</span>jobGroup<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withDescription</span><span class="token punctuation">(</span>quartz<span class="token punctuation">.</span>description<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 解析job参数</span>        <span class="token keyword">val</span> ids <span class="token operator">=</span> quartz<span class="token punctuation">.</span>taskIDs <span class="token operator">?:</span> <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token string">"任务ID列表为空！"</span><span class="token punctuation">)</span>        <span class="token keyword">val</span> list <span class="token operator">=</span> monitorService<span class="token punctuation">.</span><span class="token function">queryJob</span><span class="token punctuation">(</span>ids<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ids<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">.</span><span class="token function">toRegex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dropLastWhile</span> <span class="token punctuation">{</span> it<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">toTypedArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>size <span class="token operator">!=</span> list<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">"modifyJob"</span><span class="token punctuation">,</span> <span class="token string">"任务ID列表中存在id未在t_monitor_job中配置"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//出发时间点</span>        job<span class="token punctuation">.</span>jobDataMap<span class="token punctuation">[</span><span class="token string">"jobID"</span><span class="token punctuation">]</span> <span class="token operator">=</span> quartz<span class="token punctuation">.</span>taskIDs        <span class="token keyword">val</span> cronScheduleBuilder <span class="token operator">=</span> CronScheduleBuilder<span class="token punctuation">.</span><span class="token function">cronSchedule</span><span class="token punctuation">(</span>Objects<span class="token punctuation">.</span>requireNonNull<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span>quartz<span class="token punctuation">.</span>cronExpression<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">val</span> trigger <span class="token operator">=</span> TriggerBuilder<span class="token punctuation">.</span><span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"trigger"</span> <span class="token operator">+</span> quartz<span class="token punctuation">.</span>jobName<span class="token operator">!!</span><span class="token punctuation">,</span> quartz<span class="token punctuation">.</span>jobGroup<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">startNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withSchedule</span><span class="token punctuation">(</span>cronScheduleBuilder<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//交由Scheduler安排触发</span>        scheduler<span class="token punctuation">.</span><span class="token function">scheduleJob</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> trigger<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> Exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">"modifyJob"</span><span class="token punctuation">,</span> <span class="token string">"任务修改发生错误，<span class="token interpolation"><span class="token delimiter variable">${</span>e<span class="token punctuation">.</span>message<span class="token delimiter variable">}</span></span>"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在Job类中实现Job接口，重写execute函数，在函数里调用Service执行Job进行检查，并将检查的结果存放至MySQL中，同时通过邮件和企业微信的方式对检查结果进行发送和提醒，需要注意的是execute方法中仅允许抛出一种类型的异常（包括RuntimeExceptions），即JobExecutionException，因此，应该将execute方法中的所有内容都放到一个”try-catch”块中，job可以使用该异常告诉scheduler，你希望如何来处理发生的异常。下面是Job类：</p><pre class="line-numbers language-kotlin"><code class="language-kotlin"><span class="token comment" spellcheck="true">/** * Job 的实例要到该执行它们的时候才会实例化出来。每次 Job 被执行，一个新的 Job 实例会被创建。 * 不必担心线程安全性，因为同一时刻仅有一个线程去执行给定 Job 类的实例，甚至是并发执行同一 Job 也是如此。 * @DisallowConcurrentExecution 保证上一个任务执行完后，再去执行下一个任务，这里的任务是同一个任务 */</span><span class="token annotation builtin">@DisallowConcurrentExecution</span><span class="token annotation builtin">@Component</span><span class="token keyword">class</span> MonitorCheckJob <span class="token operator">:</span> Job<span class="token punctuation">,</span> Serializable <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">val</span> logger <span class="token operator">=</span> LOGHelperFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>MonitorCheckJob<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">)</span>    <span class="token annotation builtin">@Autowired</span>    <span class="token keyword">private</span> <span class="token keyword">lateinit</span> <span class="token keyword">var</span> monitorService<span class="token operator">:</span> MonitorService    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">execute</span><span class="token punctuation">(</span>context<span class="token operator">:</span> JobExecutionContext<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">val</span> jobID <span class="token operator">=</span> context<span class="token operator">?</span><span class="token punctuation">.</span>jobDetail<span class="token operator">?</span><span class="token punctuation">.</span>jobDataMap<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"jobID"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            monitorService<span class="token punctuation">.</span><span class="token function">executeJob</span><span class="token punctuation">(</span>jobID <span class="token operator">=</span> jobID<span class="token punctuation">)</span>            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">"execute"</span><span class="token punctuation">,</span> <span class="token string">"job{jobID=<span class="token interpolation variable">$jobID</span>}执行成功"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> JobExecutionException<span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">"execute"</span><span class="token punctuation">,</span> <span class="token string">"<span class="token interpolation"><span class="token delimiter variable">${</span>e<span class="token punctuation">.</span>message<span class="token delimiter variable">}</span></span>"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="规划与总结"><a href="#规划与总结" class="headerlink" title="规划与总结"></a>规划与总结</h1><p>现有的hive-monitor功能比较单一，使用面窄，后续需要进一步优化，愿景是hive-monitor能够让使用人员通过界面更加灵活的配置Job，增加使用场景（虽然名字叫做hive-monitor，但是也希望能够做到不局限在hive或hdfs源）。规划或正在实现的一些任务项：</p><ul><li><p>登陆和接口鉴权（依托于数据门户鉴权系统）</p></li><li><p>检测结果查询和浏览</p></li><li><p>请产品同事帮忙设计界面原型，针对现有界面改造和迁移至数据门户下</p></li><li><p>hdfs相关的一些操作，比如文件生成时间，目录大小检测等</p></li><li><p>提供更多的提醒和告警方式，如短信、电话</p></li></ul><p>以上我在设计和开发hive-monitor时候的一些经历</p><p>一些常见Error这里也不再一一列举赘述了，对此如果有任何问题也欢迎在线下与笔者一起交流.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Hive </tag>
            
            <tag> Java </tag>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
